🚀 Project: Multi-Tier Web App on Kubernetes
🧩 Overview
You'll deploy a multi-tier web application (frontend, backend API, and database) on Kubernetes to understand how requests flow between services and how networking works within the cluster.

🔧 Components
Frontend

React or simple Nginx-based static site

Sends requests to the backend API

Backend API

Python Flask or Node.js Express

Handles business logic and talks to the database

Database

PostgreSQL or MySQL

Stores user data or content

🌐 Network Flow
text
Copy
Edit
[Client Browser] 
     │
     ▼
[Ingress Controller (Nginx/Traefik)]
     │
     ▼
[Frontend Service]
     │
     ▼
[Backend Service]
     │
     ▼
[Database Service]
You'll explore:

How services communicate within a namespace

Role of ClusterIP, NodePort, LoadBalancer

Ingress traffic routing

DNS resolution between services (like backend.default.svc.cluster.local)

Network policies (optional advanced)

📁 Folder Structure Example
pgsql
Copy
Edit
k8s-multi-tier-app/
│
├── k8s/
│   ├── frontend-deployment.yaml
│   ├── backend-deployment.yaml
│   ├── db-deployment.yaml
│   ├── services.yaml
│   └── ingress.yaml
│
├── frontend/
│   └── index.html or React app
│
├── backend/
│   └── app.py or server.js
│
└── README.md
📖 Learning Goals
Kubernetes resource types (Pod, Service, Deployment, Ingress)

How to use kubectl to inspect pod logs and events

How requests flow across the app tiers

How DNS and services resolve in the cluster

(Optional) Add NetworkPolicy to control pod communication

🧪 Tools
Minikube or Kind (for local setup)

kubectl, k9s (for visualization)

Prometheus + Grafana (optional for monitoring)

Istio or Linkerd (optional for service mesh/network visibility)

Want me to generate the YAMLs and sample app code to get you started fast?







You said:
codes ?


ChatGPT said:
Awesome! Here’s the complete code setup for a basic 3-tier Kubernetes project. This includes:

Frontend (simple HTML via Nginx)

Backend (Python Flask API)

PostgreSQL database

Kubernetes YAMLs for Deployment, Service, and Ingress

🌐 Project: Mini Kubernetes Web App
1. 📁 Project Structure
pgsql
Copy
Edit
k8s-multi-tier-app/
├── backend/
│   ├── app.py
│   └── Dockerfile
├── frontend/
│   ├── index.html
│   └── Dockerfile
├── k8s/
│   ├── backend.yaml
│   ├── frontend.yaml
│   ├── postgres.yaml
│   └── ingress.yaml
└── README.md
2. 💻 Backend Code (Flask)
backend/app.py

python
Copy
Edit
from flask import Flask, jsonify
import os
import psycopg2

app = Flask(__name__)

@app.route('/')
def hello():
    return "Hello from Backend!"

@app.route('/db')
def db_connect():
    try:
        conn = psycopg2.connect(
            host=os.environ.get("DB_HOST", "postgres"),
            dbname=os.environ.get("POSTGRES_DB", "mydb"),
            user=os.environ.get("POSTGRES_USER", "admin"),
            password=os.environ.get("POSTGRES_PASSWORD", "admin"),
        )
        return jsonify({"message": "Connected to database!"})
    except Exception as e:
        return jsonify({"error": str(e)})

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
backend/Dockerfile

dockerfile
Copy
Edit
FROM python:3.9
WORKDIR /app
COPY app.py .
RUN pip install flask psycopg2
CMD ["python", "app.py"]
3. 🖥️ Frontend Code (Simple HTML)
frontend/index.html

html
Copy
Edit
<!DOCTYPE html>
<html>
<head><title>Frontend</title></head>
<body>
  <h1>Hello from Frontend!</h1>
  <p><a href="/api">Call Backend</a></p>
</body>
</html>
frontend/Dockerfile

dockerfile
Copy
Edit
FROM nginx:alpine
COPY index.html /usr/share/nginx/html/index.html
4. 📦 PostgreSQL Deployment
k8s/postgres.yaml

yaml
Copy
Edit
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
type: Opaque
data:
  POSTGRES_USER: YWRtaW4=       # base64(admin)
  POSTGRES_PASSWORD: YWRtaW4=   # base64(admin)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: "mydb"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-storage
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: postgres
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
5. 🐍 Backend Deployment
k8s/backend.yaml

yaml
Copy
Edit
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: yourdockerhub/backend:latest  # Replace with your image
        ports:
        - containerPort: 5000
        env:
        - name: DB_HOST
          value: "postgres"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secret
              key: POSTGRES_PASSWORD
---
apiVersion: v1
kind: Service
metadata:
  name: backend
spec:
  selector:
    app: backend
  ports:
    - port: 5000
      targetPort: 5000
6. 🌍 Frontend Deployment
k8s/frontend.yaml

yaml
Copy
Edit
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: yourdockerhub/frontend:latest  # Replace with your image
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: frontend
spec:
  selector:
    app: frontend
  ports:
    - port: 80
      targetPort: 80
  type: ClusterIP
7. 🚪 Ingress (Optional)
k8s/ingress.yaml

yaml
Copy
Edit
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: web-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - host: myapp.local
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: frontend
            port:
              number: 80
      - path: /api
        pathType: Prefix
        backend:
          service:
            name: backend
            port:
              number: 5000
Use /etc/hosts to map myapp.local to 127.0.0.1 if running locally.

✅ What You’ll Learn
How services find each other in Kubernetes using internal DNS.

The flow of traffic from frontend to backend to database.

Deployments, Secrets, PVCs, and Ingress usage.

How to debug using kubectl logs, kubectl describe, etc.